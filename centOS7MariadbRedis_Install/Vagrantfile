#-------setting-------
#youFilePath = "/Users/f0xxxx/codePJ"
set_IP = "192.168.33.10"
machine_menory = "4096"
machine_cpu = 2
passwordSetChange = "Qqwr123!"

VMName = "centos7"
usHostName = "company.inoo"

#-------setting-end-----

Vagrant.configure("2") do |config|
  config.vm.box = "centos/7"
  config.vm.box_check_update = true

  config.vbguest.auto_update = true
  
  # do NOT download the iso file from a webserver
  config.vbguest.no_remote = false



 # Defaults for forwarded port settings:
  forwarded_port_defaults = {
    auto_correct: true,
  }


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port

  config.vm.network "forwarded_port", guest: 22, host: 2222,id: "ssh",  auto_correct: true
  config.vm.network "forwarded_port", guest: 22, host: 22 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 80, host: 80 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 81, host: 81 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 82, host: 82 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 83, host: 83 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 84, host: 84 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 85, host: 85 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 86, host: 86 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 87, host: 87 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 88, host: 88 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 89, host: 89 ,auto_correct: true
  config.vm.network "forwarded_port", guest: 443, host: 443, auto_correct: true
  config.vm.network "forwarded_port", guest: 3000, host: 3000, auto_correct: true
  config.vm.network "forwarded_port", guest: 8080, host: 8080, auto_correct: true
  config.vm.network "forwarded_port", guest: 9000, host: 9000, auto_correct: true
  config.vm.network "forwarded_port", guest: 5001, host: 5001, auto_correct: true
  config.vm.network "forwarded_port", guest: 5000, host: 5000, auto_correct: true
  config.vm.network "forwarded_port", guest: 3434, host: 3434, auto_correct: true
  config.vm.network "forwarded_port", guest: 6379, host: 6379, auto_correct: true
  config.vm.network "forwarded_port", guest: 3306, host: 3306, auto_correct: true
  config.vm.network "forwarded_port", guest: 1433, host: 1433, auto_correct: true


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #VM IP address
  config.vm.network "private_network", ip: set_IP

  config.ssh.password = passwordSetChange
  config.ssh.host = set_IP
  config.ssh.port = 22

  config.ssh.insert_key = true

  # Share an additional folder to the guest VM. The first argument is
  config.vm.hostname = usHostName

  #outsilde join file path
  config.vm.synced_folder ".", "/home/vagrant", disabled: false
  #config.vm.synced_folder youFilePath, "/home/codePJ"



   
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  #
  #   # Customize the amount of memory on the VM:
     vb.name = VMName
     vb.memory = machine_menory
     vb.cpus = machine_cpu
  end

  config.ssh.shell = %{bash -c 'BASH_ENV=/etc/profile exec bash'}
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
config.vm.provision :shell, :inline => "echo "+passwordSetChange+" | sudo passwd vagrant --stdin;", run: "always"
config.vm.provision "shell", path: "dotnet.sh"
config.vm.provision "shell", path: "db.sh"
config.vm.provision "shell", path: "sshSet.sh"
end
